--- hijack/hijack.c
+++ hijack/hijack.c
@@ -259,38 +259,60 @@ load_symtab(char *filename)
 static int
 load_memmap(pid_t pid, struct mm *mm, int *nmmp)
 {
-   static char raw[10485760]; // this depends on the number of libraries an executable uses
+   char path[PATH_MAX];
    char name[MAX_NAME_LEN];
-   char *p;
+   char *raw, *p;
+   size_t raw_size;
    unsigned long start, end;
    struct mm *m;
    int nmm = 0;
    int fd, rv;
    int i;

-   sprintf(raw, "/proc/%d/maps", pid);
-   fd = open(raw, O_RDONLY);
+   sprintf(path, "/proc/%d/maps", pid);
+   fd = open(path, O_RDONLY);
    if (0 > fd) {
        printf("Can't open %s for reading\n", raw);
        return -1;
    }

-   /* Zero to ensure data is null terminated */
-   memset(raw, 0, sizeof(raw));
+   /* start off an initial buffer */
+   raw_size = 1024;
+   raw = malloc(raw_size);
+   if(!raw) {
+       // perror("malloc");
+       return -1;
+   }
+
+   /* zero to ensure data is null terminated */
+   memset(raw, 0, raw_size);

    p = raw;
    while (1) {
-       rv = read(fd, p, sizeof(raw)-(p-raw));
-       if (0 > rv) {
+       size_t rem = raw_size - (p - raw);
+       rv = read(fd, p, rem);
+       if (rv < 0) {
            //perror("read");
+           free(raw);
            return -1;
        }
        if (0 == rv)
            break;
        p += rv;
-       if (p-raw >= sizeof(raw)) {
-           printf("Too many memory mapping\n");
-           return -1;
+
+       /* check to see if we need to grow the buffer */
+       if(p - raw >= raw_size) {
+           char* grown = realloc(raw, raw_size * 2);
+           if(!grown) {
+               // perror("realloc");
+               free(raw);
+               return -1;
+           }
+
+           raw = grown;
+           memset(raw + raw_size, 0, raw_size);
+           p = raw + raw_size;
+           raw_size *= 2;
        }
    }
    close(fd);
@@ -339,6 +361,7 @@ load_memmap(pid_t pid, struct mm *mm, int *nmmp)
    }

    *nmmp = nmm;
+   free(raw);
    return 0;
 }
